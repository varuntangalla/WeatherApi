{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","Form","onSubmit","getWeather","type","name","placeholder","className","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAQeA,EANA,SAAAC,GAAK,OAChB,6BACA,8CACA,6ECWWC,EAbF,SAAAD,GAAK,OAEd,0BAAME,SAAUF,EAAMG,YAEtB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,cAC9C,4BAAQC,UAAU,8BAAlB,iBCMWC,EAZC,SAAAR,GAAK,OAEjB,6BACEA,EAAMS,MAAQT,EAAMU,SAAW,yCAAgBV,EAAMS,KAAtB,KAAgCT,EAAMU,SACrEV,EAAMW,aAAe,2CAAkBX,EAAMW,aAC7CX,EAAMY,UAAY,wCAAeZ,EAAMY,UACvCZ,EAAMa,aAAe,yCAAgBb,EAAMa,aAC3Cb,EAAMc,OAAS,2BAAKd,EAAMc,SCL1BC,EAAU,mCAkEDC,E,2MA9DbC,MAAQ,CACNN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAGTf,W,uCAAa,WAAOgB,GAAP,qBAAAC,EAAA,6DAEXD,EAAEE,iBAEIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAL/B,SAMYC,MAAM,oDAAD,OAAqDhB,EAArD,YAA6DC,EAA7D,kBAA8EK,EAA9E,kBANjB,cAMLW,EANK,gBAOQA,EAASC,OAPjB,OAOLC,EAPK,OASPnB,GAAQC,EAEV,EAAKmB,SAAS,CACZlB,YAAaiB,EAAKE,KAAKC,KACvBtB,KAAMmB,EAAKvB,KACXK,QAASkB,EAAKI,IAAItB,QAClBE,SAAUgB,EAAKE,KAAKlB,SACpBC,YAAae,EAAKK,QAAQ,GAAGpB,YAC7BC,MAAO,KAKT,EAAKe,SAAS,CACZlB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,2BA5BA,4C,8HAmCX,OACE,6BAEG,kBAAC,EAAD,MACH,kBAAC,EAAD,CAAMX,WAAY+B,KAAK/B,aACvB,kBAAC,EAAD,CACAQ,YAAauB,KAAKjB,MAAMN,YACxBF,KAAMyB,KAAKjB,MAAMR,KACjBC,QAASwB,KAAKjB,MAAMP,QACpBE,SAAUsB,KAAKjB,MAAML,SACrBC,YAAaqB,KAAKjB,MAAMJ,YACxBC,MAAOoB,KAAKjB,MAAMH,a,GAzDNqB,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7813fdb2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Titles = props => (\n    <div>\n    <h1>Weather Finder</h1>\n    <p>Find out temperature, conditions and more...</p>\n</div>\n);\nexport default Titles;","import React  from 'react';\n\n\nconst Form = props => (\n\n    <form onSubmit={props.getWeather}>\n\n    <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n    <input type=\"text\" name=\"country\" placeholder=\"Country..\"/>\n    <button className=\"btn btn-primary btn-sm m-2\">Get Weather</button>\n    </form>\n\n\n\n);\n \nexport default Form;","import React from 'react';\n\n \nconst Weather = props => (\n\n    <div>\n    { props.city && props.country && <p> Location: { props.city }, { props.country }</p>} \n    { props.temperature && <p>Temperature: { props.temperature }</p>}\n    { props.humidity && <p>Humidity: { props.humidity }</p> }\n    { props.description && <p>Condition: { props.description }</p> }\n    { props.error && <p>{ props.error }</p>}\n    </div>\n);\n\n\nexport default Weather;\n\n","import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"80108542c4c9075989f1f5f202b45e1d\";\n\nclass App extends React.Component {\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    //console.log(data);\n    if (city && country) {\n\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n\n    } else {\n\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the value\"\n      });\n\n    }\n  }\n\n  render(){\n    return (\n      <div> \n         \n         <Titles />\n      <Form getWeather={this.getWeather}/>\n      <Weather \n      temperature={this.state.temperature}\n      city={this.state.city}\n      country={this.state.country}\n      humidity={this.state.humidity}\n      description={this.state.description}\n      error={this.state.error} />   \n        </div>\n\n    );\n  }\n};\n\nexport default App;\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}